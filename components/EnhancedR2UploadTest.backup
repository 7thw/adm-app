"use client"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { api } from "@/convex/_generated/api"
import { UserButton, useUser } from "@clerk/nextjs"
import { useMutation, useQuery } from "convex/react"
import { CheckCircle, Eye, Loader2, Music, Play, Upload, XCircle } from "lucide-react"
import { useState } from "react"

export default function EnhancedR2UploadTest() {
  const { isSignedIn, user, isLoaded } = useUser()
  const [testResults, setTestResults] = useState<{
    [key: string]: { success: boolean; url?: string; error?: string; fileSize?: number }
  }>({})

  const [isLoading, setIsLoading] = useState(false)
  const [selectedAudioFile, setSelectedAudioFile] = useState<string | null>(null)

  // Convex mutations and queries - only call if authenticated
  const generateUploadUrl = useMutation(api.media.generateUploadUrl)
  const getAllMedia = useQuery(api.media.getAllMedia, isSignedIn ? {} : "skip")

  // Audio files to test with
  const audioFiles = [
    { name: "M-1.mp3", path: "/audio/M-1.mp3", size: 733645 },
    { name: "M-2.mp3", path: "/audio/M-2.mp3", size: 733645 },
    { name: "M-3.mp3", path: "/audio/M-3.mp3", size: 733645 }
  ]

  // Test upload with real audio file
  const testUploadAudio = async (audioFile: typeof audioFiles[0]) => {
    const testKey = `upload_${audioFile.name}`
    setIsLoading(true)
    setSelectedAudioFile(audioFile.name)

    try {
      console.log(`🎵 Testing upload of ${audioFile.name} (${(audioFile.size / 1024).toFixed(1)} KB)...`)

      // Step 1: Generate upload URL
      console.log("📝 Step 1: Generating upload URL...")
      const uploadResult = await generateUploadUrl()
      console.log("✅ Upload URL generated:", uploadResult.url)

      // Step 2: Fetch the audio file
      console.log("📁 Step 2: Fetching audio file...")
      const response = await fetch(audioFile.path)
      if (!response.ok) {
        throw new Error(`Failed to fetch ${audioFile.name}: ${response.statusText}`)
      }
      const blob = await response.blob()
      console.log(`✅ Audio file loaded: ${blob.size} bytes`)

      // Step 3: Upload to R2
      console.log("☁️ Step 3: Uploading to R2...")
      const uploadResponse = await fetch(uploadResult.url, {
        method: 'PUT',
        body: blob,
        headers: {
          'Content-Type': 'audio/mpeg'
        }
      })

      if (uploadResponse.ok) {
        console.log("✅ Audio file uploaded successfully!")
        setTestResults(prev => ({
          ...prev,
          [testKey]: {
            success: true,
            url: uploadResult.url,
            fileSize: blob.size
          }
        }))
      } else {
        throw new Error(`Upload failed: ${uploadResponse.status} ${uploadResponse.statusText}`)
      }

    } catch (error) {
      console.error(`❌ Upload failed for ${audioFile.name}:`, error)
      setTestResults(prev => ({
        ...prev,
        [testKey]: {
          success: false,
          error: error instanceof Error ? error.message : "Unknown error"
        }
      }))
    } finally {
      setIsLoading(false)
      setSelectedAudioFile(null)
    }
  }

  // Test all audio files
  const testAllAudioFiles = async () => {
    setIsLoading(true)
    try {
      for (const audioFile of audioFiles) {
        await testUploadAudio(audioFile)
        // Small delay between uploads
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
    } finally {
      setIsLoading(false)
    }
  }

  // Clear test results
  const clearResults = () => {
    setTestResults({})
  }

  const TestResult = ({
    title,
    result,
    isActive = false
  }: {
    title: string
    result?: { success: boolean; error?: string; fileSize?: number }
    isActive?: boolean
  }) => (
    <div className={`flex items-center justify-between p-3 border rounded-lg ${isActive ? 'bg-blue-50 border-blue-200' : ''
      }`}>
      <div className="flex items-center gap-2">
        {result?.success === true && <CheckCircle className="w-5 h-5 text-green-500" />}
        {result?.success === false && <XCircle className="w-5 h-5 text-red-500" />}
        {result === undefined && !isActive && <div className="w-5 h-5 border-2 border-gray-300 rounded-full" />}
        {isActive && <Loader2 className="w-5 h-5 animate-spin text-blue-500" />}
        <span className="font-medium">{title}</span>
        {result?.fileSize && (
          <span className="text-sm text-gray-500">
            ({(result.fileSize / 1024).toFixed(1)} KB)
          </span>
        )}
      </div>
      {result?.success === true && (
        <Badge variant="secondary" className="text-green-700 bg-green-100">
          Success
        </Badge>
      )}
      {result?.success === false && (
        <Badge variant="destructive">
          Failed
        </Badge>
      )}
      {result === undefined && !isActive && (
        <Badge variant="outline">
          Ready
        </Badge>
      )}
      {isActive && (
        <Badge variant="secondary" className="text-blue-700 bg-blue-100">
          Uploading...
        </Badge>
      )}
    </div>
  )

  return (
    <Card className="w-full max-w-4xl">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Music className="w-5 h-5" />
          Enhanced R2 Audio Upload Test
        </CardTitle>
        <CardDescription>
          Test R2 integration with real MP3 files (733KB each)
        </CardDescription>
      </CardHeader>

      <CardContent className="space-y-6">
        {/* Authentication Status */}
        {!isLoaded ? (
          <div className="flex items-center gap-2 p-3 border rounded-lg">
            <Loader2 className="w-4 h-4 animate-spin" />
            <span>Loading authentication...</span>
          </div>
        ) : isSignedIn ? (
          <div className="flex items-center gap-2 p-3 border rounded-lg bg-green-50 border-green-200">
            <CheckCircle className="w-5 h-5 text-green-500" />
            <span className="font-medium">
              Authenticated as {user?.emailAddresses[0]?.emailAddress || 'User'}
            </span>
            <UserButton />
          </div>
        ) : (
          <div className="p-4 border rounded-lg bg-red-50 border-red-200">
            <div className="flex items-center gap-2 mb-2">
              <XCircle className="w-5 h-5 text-red-600" />
              <span className="font-medium text-red-800">Not Authenticated</span>
            </div>
            <p className="text-sm text-red-700">
              You should be redirected to sign in. If not, please go to <a href="/sign-in" className="underline">/sign-in</a>
            </p>
          </div>
        )}

        {/* Only show tests if authenticated */}
        {isSignedIn && (
          <>
            {/* Audio File Upload Tests */}
            <div className="space-y-2">
              <h3 className="font-semibold">Audio File Upload Tests</h3>
              {audioFiles.map((audioFile) => (
                <TestResult
                  key={audioFile.name}
                  title={`Upload ${audioFile.name}`}
                  result={testResults[`upload_${audioFile.name}`]}
                  isActive={selectedAudioFile === audioFile.name}
                />
              ))}
            </div>

            {/* Test Buttons */}
            <div className="flex flex-wrap gap-2">
              {audioFiles.map((audioFile) => (
                <Button
                  key={audioFile.name}
                  onClick={() => testUploadAudio(audioFile)}
                  disabled={isLoading}
                  variant="outline"
                  size="sm"
                >
                  {isLoading && selectedAudioFile === audioFile.name ? (
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  ) : (
                    <Upload className="w-4 h-4 mr-2" />
                  )}
                  {audioFile.name}
                </Button>
              ))}

              <Button
                onClick={testAllAudioFiles}
                disabled={isLoading}
                variant="default"
              >
                {isLoading ? (
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <Upload className="w-4 h-4 mr-2" />
                )}
                Upload All Files
              </Button>

              <Button
                onClick={clearResults}
                variant="outline"
                size="sm"
              >
                Clear Results
              </Button>
            </div>

            {/* Error Details */}
            {Object.values(testResults).some(result => result?.error) && (
              <div className="space-y-2">
                <h3 className="font-semibold text-red-600">Error Details</h3>
                <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                  {Object.entries(testResults).map(([key, result]) => (
                    result?.error && (
                      <p key={key} className="text-sm text-red-700">
                        <strong>{key}:</strong> {result.error}
                      </p>
                    )
                  ))}
                </div>
              </div>
            )}

            {/* Media Database */}
            {getAllMedia && getAllMedia.length > 0 && (
              <div className="space-y-2">
                <h3 className="font-semibold flex items-center gap-2">
                  <Eye className="w-4 h-4" />
                  Media Database ({getAllMedia.length} files)
                </h3>
                <div className="max-h-64 overflow-y-auto space-y-2">
                  {getAllMedia.map((media) => (
                    <div key={media._id} className="p-3 border rounded text-sm">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          {media.mediaType === 'audio' ? (
                            <Music className="w-4 h-4 text-blue-500" />
                          ) : (
                            <Play className="w-4 h-4 text-purple-500" />
                          )}
                          <span className="font-medium">{media.title}</span>
                        </div>
                        <Badge variant={media.mediaType === 'audio' ? 'default' : 'secondary'}>
                          {media.mediaType}
                        </Badge>
                      </div>
                      <div className="mt-2 grid grid-cols-2 gap-2 text-xs text-gray-600">
                        <p><strong>Size:</strong> {(media.fileSize / 1024).toFixed(1)} KB</p>
                        <p><strong>Type:</strong> {media.contentType}</p>
                        <p><strong>Created:</strong> {new Date(media._creationTime).toLocaleString()}</p>
                        <p><strong>Key:</strong> {media.fileKey}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </>
        )}
      </CardContent>
    </Card>
  )
}
