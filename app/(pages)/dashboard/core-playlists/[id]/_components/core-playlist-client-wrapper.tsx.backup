"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import CorePlaylistEditor from "./core-playlist-editor";
import { Loader2 } from "lucide-react";

interface CorePlaylistClientWrapperProps {
  stringId: string;
}

export default function CorePlaylistClientWrapper({ stringId }: CorePlaylistClientWrapperProps) {
  const router = useRouter();
  
  // Instead of trying to convert the ID directly, we'll use a special query
  // that will try to find the playlist by its string ID
  const playlist = useQuery(api.corePlaylists.getByStringId, { stringId });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  
  useEffect(() => {
    // Give the query some time to resolve
    const timer = setTimeout(() => {
      setLoading(false);
      if (playlist === undefined) {
        setError(true);
      }
    }, 2000);
    
    return () => clearTimeout(timer);
  }, [playlist]);

  // If we're still loading, show a loading indicator
  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
      </div>
    );
  }
  
  // If there was an error or no playlist found, show an error message
  if (error || playlist === null) {
    return (
      <div className="p-8 text-center">
        <h2 className="text-xl font-semibold mb-2">Invalid Playlist ID</h2>
        <p className="text-muted-foreground">The playlist ID provided is not valid.</p>
      </div>
    );
  }

  // If we have a playlist, render the editor
  // TypeScript needs a non-null assertion here since we've already checked playlist isn't null
  return <CorePlaylistEditor id={playlist!._id} />;
}
