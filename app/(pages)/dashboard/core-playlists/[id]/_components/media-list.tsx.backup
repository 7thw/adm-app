"use client";

import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";
import {
  closestCenter,
  DndContext,
  DragEndEvent,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  useSortable,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { useMutation, useQuery } from "convex/react";
import { GripVertical, Loader2, Music, Trash2, Video } from "lucide-react";
import { useEffect, useState } from "react";
import { toast } from "sonner";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";

interface MediaListProps {
  sectionId: Id<"coreSections">;
}

export default function MediaList({ sectionId }: MediaListProps) {
  const section = useQuery(api.coreSections.getById, { id: sectionId });
  const sectionMedia = useQuery(api.coreSectionMedia.getSelectedBySectionId, { sectionId });
  const reorderMedia = useMutation(api.coreSectionMedia.reorderMedia);
  const removeMedia = useMutation(api.coreSectionMedia.removeMedia);

  const [mediaItems, setMediaItems] = useState<any[]>([]);

  // Update media items when sectionMedia changes
  useEffect(() => {
    if (sectionMedia) {
      // sectionMedia already includes the media details
      setMediaItems(sectionMedia.map(item => item.media).filter(Boolean));
    }
  }, [sectionMedia]);

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const handleDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event;

    if (!over || active.id === over.id) {
      return;
    }

    const oldIndex = mediaItems.findIndex((item) => item._id === active.id);
    const newIndex = mediaItems.findIndex((item) => item._id === over.id);

    if (oldIndex === -1 || newIndex === -1) {
      return;
    }

    const newMediaItems = arrayMove(mediaItems, oldIndex, newIndex);
    setMediaItems(newMediaItems);

    // Update the order in the database
    if (!sectionMedia) return;

    try {
      // Create mediaOrders array with sectionMedia IDs and new order positions
      const mediaOrders = sectionMedia.map((item, index) => ({
        id: item._id,
        order: index + 1,
      }));

      await reorderMedia({ mediaOrders });
    } catch (error) {
      toast.error("Failed to reorder media");
      console.error(error);
    }
  };

  const handleRemoveMedia = async (sectionMediaId: Id<"sectionMedia">) => {
    try {
      await removeMedia({
        id: sectionMediaId,
      });
      toast.success("Media removed from section");
    } catch (error) {
      toast.error("Failed to remove media");
      console.error(error);
    }
  };

  if (!section || !sectionMedia) {
    return (
      <div className="flex items-center justify-center h-24">
        <Loader2 className="h-5 w-5 animate-spin text-muted-foreground" />
      </div>
    );
  }

  if (sectionMedia.length === 0) {
    return (
      <div className="text-center py-4 border border-dashed rounded-lg">
        <p className="text-muted-foreground text-sm">No media added yet</p>
      </div>
    );
  }

  if (mediaItems.length === 0) {
    return (
      <div className="flex items-center justify-center h-24">
        <Loader2 className="h-5 w-5 animate-spin text-muted-foreground" />
      </div>
    );
  }

  return (
    <div>
      <DndContext
        sensors={sensors}
        collisionDetection={closestCenter}
        onDragEnd={handleDragEnd}
      >
        <SortableContext
          items={mediaItems.map((media) => media._id)}
          strategy={verticalListSortingStrategy}
        >
          <div className="space-y-2">
            {mediaItems.map((media, index) => {
              // Find the corresponding sectionMedia entry to get its ID
              const sectionMediaEntry = sectionMedia?.find(item =>
                item.media && item.media._id === media._id
              );

              return (
                <SortableMediaItem
                  key={media._id.toString()}
                  id={media._id}
                  media={media}
                  onRemove={() => sectionMediaEntry && handleRemoveMedia(sectionMediaEntry._id)}
                />
              );
            })}
          </div>
        </SortableContext>
      </DndContext>
    </div>
  );
}

interface SortableMediaItemProps {
  id: Id<"media">;
  media: any;
  onRemove: () => void;
}

function SortableMediaItem({ id, media, onRemove }: SortableMediaItemProps) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
  } = useSortable({ id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      className="flex items-center gap-2 p-2 bg-card rounded-md border"
    >
      <div
        className="p-1 cursor-grab hover:bg-muted rounded"
        {...attributes}
        {...listeners}
      >
        <GripVertical className="h-4 w-4 text-muted-foreground" />
      </div>
      <div className="flex-1 flex items-center gap-2">
        <Badge variant="outline" className="flex items-center gap-1">
          {media.mediaType === "audio" ? (
            <Music className="h-3 w-3" />
          ) : (
            <Video className="h-3 w-3" />
          )}
          {media.mediaType}
        </Badge>
        <span className="text-sm truncate">{media.title}</span>
      </div>
      <Button
        size="icon"
        variant="ghost"
        className="h-7 w-7"
        onClick={onRemove}
      >
        <Trash2 className="h-4 w-4" />
      </Button>
    </div>
  );
}
