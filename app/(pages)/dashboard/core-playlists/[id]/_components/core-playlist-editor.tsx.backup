"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useQuery, useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";
import type * as CoreSections from "@/convex/coreSections";
import type * as CorePlaylists from "@/convex/corePlaylists";
import type * as PlaylistCategories from "@/convex/playlistCategories";
import { Id } from "@/convex/_generated/dataModel";
import { Loader2, Save, ArrowLeft } from "lucide-react";
import { toast } from "sonner";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import CoreSectionsList from "./core-sections-list";
import AddSectionForm from "./add-section-form";

interface CorePlaylistEditorProps {
  id: Id<"corePlaylists">;
}

export default function CorePlaylistEditor({ id }: CorePlaylistEditorProps) {
  const router = useRouter();
  const corePlaylist = useQuery(api.corePlaylists.getById, { id });
  const updateCorePlaylist = useMutation(api.corePlaylists.update);
  const categories = useQuery(api.playlistCategories.getAll);

  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [categoryId, setCategoryId] = useState<Id<"playlistCategories"> | null>(null);
  const [status, setStatus] = useState<"draft" | "published">("draft");
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState("details");

  useEffect(() => {
    if (corePlaylist) {
      setTitle(corePlaylist.title);
      setDescription(corePlaylist.description);
      setCategoryId(corePlaylist.categoryId);
      setStatus(corePlaylist.status);
    }
  }, [corePlaylist]);

  const handleSave = async () => {
    setIsLoading(true);
    try {
      if (!categoryId) {
        throw new Error("Category is required");
      }

      await updateCorePlaylist({
        id,
        title,
        description,
        categoryId,
        status,
      });
      toast.success("Core playlist updated successfully");
    } catch (error) {
      toast.error("Failed to update core playlist");
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };

  if (!corePlaylist) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => router.push("/dashboard/core-playlists")}
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <h1 className="text-xl font-bold">Edit CorPlaylist</h1>
        </div>
        <Button onClick={handleSave} disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Saving...
            </>
          ) : (
            <>
              <Save className="mr-2 h-4 w-4" />
              Save Changes
            </>
          )}
        </Button>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="details">corePlaylist Details</TabsTrigger>
          <TabsTrigger value="sections">Sections & Media</TabsTrigger>
        </TabsList>
        <TabsContent value="details" className="space-y-4 pt-4">
          <Card>
            <CardHeader>
              <CardTitle>corePlaylist Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label htmlFor="title" className="text-sm font-medium">
                  Title
                </label>
                <Input
                  id="title"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="Enter playlist title"
                />
              </div>
              <div className="space-y-2">
                <label htmlFor="description" className="text-sm font-medium">
                  Description
                </label>
                <Textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="Enter playlist description"
                  rows={4}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label htmlFor="category" className="text-sm font-medium">
                    Category
                  </label>
                  <Select
                    value={categoryId ? categoryId : undefined}
                    onValueChange={(value) => setCategoryId(value as Id<"playlistCategories">)}
                    disabled={!categories || categories.length === 0}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories ? (
                        categories.map((category) => (
                          <SelectItem key={category._id} value={category._id}>
                            {category.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="" disabled>
                          Loading categories...
                        </SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <label htmlFor="status" className="text-sm font-medium">
                    Status
                  </label>
                  <Select
                    value={status}
                    onValueChange={(value) =>
                      setStatus(value as "draft" | "published")
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="draft">Draft</SelectItem>
                      <SelectItem value="published">Published</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="sections" className="space-y-4 pt-4">
          <Card>
            <CardHeader>
              <CardTitle>Sections</CardTitle>
            </CardHeader>
            <CardContent>
              <CoreSectionsList corePlaylistId={id} />
              <div className="mt-6 border-t pt-6">
                <h3 className="text-lg font-medium mb-4">Add New Section</h3>
                <AddSectionForm corePlaylistId={id} />
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
