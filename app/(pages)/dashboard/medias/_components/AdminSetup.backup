// AdminSetup.tsx - Component to solve authentication issue
"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { api } from "@/convex/_generated/api"
import { useUser } from "@clerk/nextjs"
import { useMutation } from "convex/react"
import { CheckCircle, AlertCircle, User } from "lucide-react"
import { useState } from "react"
import { toast } from "sonner"

export default function AdminSetup() {
  const { user, isSignedIn } = useUser()
  const [email, setEmail] = useState(user?.emailAddresses[0]?.emailAddress || "")
  const [name, setName] = useState(user?.fullName || "")
  
  const createTestAdmin = useMutation(api.adminSetup.createTestAdmin)
  const checkAdminStatus = useMutation(api.adminSetup.checkAdminStatus)
  
  const [adminStatus, setAdminStatus] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)

  const handleCheckStatus = async () => {
    setIsLoading(true)
    try {
      const status = await checkAdminStatus()
      setAdminStatus(status)
      console.log("Admin status:", status)
    } catch (error) {
      toast.error("Failed to check admin status")
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleCreateAdmin = async () => {
    if (!email || !name) {
      toast.error("Please fill in email and name")
      return
    }

    setIsLoading(true)
    try {
      const result = await createTestAdmin({ email, name })
      toast.success(result.message)
      console.log("Admin creation result:", result)
      
      // Refresh status
      await handleCheckStatus()
    } catch (error) {
      toast.error("Failed to create admin user")
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  if (!isSignedIn) {
    return (
      <Card className="border-amber-200 bg-amber-50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertCircle className="h-5 w-5 text-amber-600" />
            Authentication Required
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-amber-700 mb-4">
            You need to sign in to upload media files.
          </p>
          <p className="text-sm text-amber-600">
            Use the sign-in button in the top navigation.
          </p>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="border-blue-200 bg-blue-50">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <User className="h-5 w-5 text-blue-600" />
          Admin Setup
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        
        {/* Current Status */}
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium">Current Status:</span>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleCheckStatus}
            disabled={isLoading}
          >
            Check Status
          </Button>
        </div>

        {adminStatus && (
          <div className={`p-3 rounded-lg ${
            adminStatus.isAdmin 
              ? 'bg-green-100 border border-green-200' 
              : 'bg-yellow-100 border border-yellow-200'
          }`}>
            <div className="flex items-center gap-2">
              {adminStatus.isAdmin ? (
                <CheckCircle className="h-4 w-4 text-green-600" />
              ) : (
                <AlertCircle className="h-4 w-4 text-yellow-600" />
              )}
              <span className="text-sm font-medium">
                {adminStatus.message}
              </span>
            </div>
            <div className="text-xs text-gray-600 mt-1">
              Email: {adminStatus.userEmail}
            </div>
          </div>
        )}

        {/* Create Admin */}
        {adminStatus && !adminStatus.isAdmin && (
          <div className="space-y-3">
            <div className="space-y-1">
              <Label htmlFor="email" className="text-sm">Email</Label>
              <Input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="admin@example.com"
                className="text-sm"
              />
            </div>
            
            <div className="space-y-1">
              <Label htmlFor="name" className="text-sm">Full Name</Label>
              <Input
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Admin User"
                className="text-sm"
              />
            </div>
            
            <Button 
              onClick={handleCreateAdmin}
              disabled={isLoading || !email || !name}
              className="w-full"
              size="sm"
            >
              {isLoading ? "Creating..." : "Create Admin User"}
            </Button>
          </div>
        )}

        {/* Success Message */}
        {adminStatus?.isAdmin && (
          <div className="text-center">
            <CheckCircle className="h-8 w-8 text-green-600 mx-auto mb-2" />
            <p className="text-sm font-medium text-green-700">
              âœ… Admin access confirmed! You can now upload media files.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
